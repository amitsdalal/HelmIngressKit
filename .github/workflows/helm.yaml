---
name: Auto Release Helm Chart

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Allows pushing commits
  pages: write  # Allows updating GitHub Pages

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: latest

      - name: Set Chart Version from Git Tag
        run: |
          # Extract version number only (strip 'v' or chart name if exists)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null | sed -E 's/^(HelmIngressKit-|v)//g')

          # If no tags exist, set a default version
          if [[ -z "$LATEST_TAG" ]]; then LATEST_TAG="1.0.0"; fi

          # Store in GitHub Actions environment
          echo "VERSION=$LATEST_TAG" >> $GITHUB_ENV

          # Ensure Chart.yaml contains only a valid semantic version
          sed -i "s/^version:.*/version: \"$LATEST_TAG\"/" charts/HelmIngressKit/Chart.yaml

          # Debugging: Print extracted version (remove after testing)
          echo "Final extracted version: $LATEST_TAG"


      - name: Package Helm Chart
        run: |
          mkdir -p .cr-release-packages
          helm package charts/HelmIngressKit --destination .cr-release-packages

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Update GitHub Pages (`gh-pages`)
        run: |
          git fetch origin gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages
          mkdir -p docs
          mv .cr-release-packages/* docs/
          helm repo index docs --url https://charts.amitdalal.com/
          git add docs/index.yaml docs/*.tgz
          git commit -m "Release HelmIngressKit v$VERSION"
          git push origin gh-pages

      - name: Debug GitHub Token
        run: |
          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "GITHUB_TOKEN is NOT available!"
            exit 1
          else
            echo "GITHUB_TOKEN is set!"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          name: "HelmIngressKit ${{ env.VERSION }}"
          body: "Automated Helm Chart release v${{ env.VERSION }}"
          draft: false
          prerelease: false
          files: .cr-release-packages/*.tgz
